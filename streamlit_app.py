import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import zipfile
import io
import openpyxl
from pandas import ExcelWriter
from streamlit_sortables import sort_items
#pmm
# Charger le fichier Excel
file_path = 'NORMES_NOV_24.xlsx'
excel_data = pd.ExcelFile(file_path)

# Liste des groupes d'√¢ge (onglets du fichier)
age_groups = excel_data.sheet_names


if "age_selected" not in st.session_state:
    st.session_state["age_selected"] = False

if "scores_entered" not in st.session_state:
    st.session_state["scores_entered"] = False

if "age_data" not in st.session_state:
    st.session_state["age_data"] = pd.DataFrame()

if "missing_norms" not in st.session_state:
    st.session_state["missing_norms"] = []


# Titre de l'application
st.markdown(
    """
    <div style="text-align: center; font-size: 40px; font-weight: bold;">
        üó£Ô∏è Batterie COMPRENDRE üß†
    </div>
    """,
    unsafe_allow_html=True
)

# √âtape 1 : S√©lection de l'√¢ge
st.header("√âtape 1 : S√©lectionnez le groupe d'√¢ge")
selected_age_group = st.selectbox("S√©lectionnez le groupe d'√¢ge de l'enfant :", age_groups)
child_id = st.text_input("Saisissez l'ID de l'enfant :", value="", placeholder="ID de l'enfant")

# Confirmation de l'ID et de l'√¢ge
if st.button("Passer √† l'√©tape suivante"):
    if not child_id.strip():  # V√©rifiez si l'ID est vide
        st.error("Veuillez saisir un ID valide avant de continuer.")
    else:
        st.session_state["age_selected"] = True
        st.session_state["child_id"] = child_id  # Enregistrez l'ID dans la session
        st.success(f"ID {child_id} et √¢ge {selected_age_group} confirm√©s.")
        
# Fonction pour charger les donn√©es d'un onglet
def load_age_data(sheet_name, excel_file):
    try:
        return pd.read_excel(excel_file, sheet_name=sheet_name, engine="openpyxl")
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        return pd.DataFrame()

# √âtape 2 : Saisie des scores
if st.session_state["age_selected"]:
    st.header("√âtape 2 : Entrez les scores")

    # Charger les donn√©es pour le groupe d'√¢ge s√©lectionn√©
    age_data = load_age_data(selected_age_group, excel_data)

    if age_data.empty:
        st.error("Impossible de charger les donn√©es pour le groupe d'√¢ge s√©lectionn√©.")
    else:
        # Filtrer les colonnes pertinentes
        age_data = age_data[["T√¢che", "Moyenne", "Ecart-type", "Minimum", 
                             "5e percentile", "10e percentile", "Q1", 
                             "Q2 - mediane", "Q3", "90e percentile", "Maximum"]].dropna()

        # Liste des cat√©gories avec les t√¢ches regroup√©es par paires
        categories = {
            "Langage": [
                ("Discrimination Phonologique", "D√©cision Lexicale Auditive"),
                ("Mots Outils", "Stock Lexical"),
                ("Compr√©hension Syntaxique", "Mots Outils - BOEHM")
            ],
            "M√©moire de Travail Verbale": [
                ("M√©moire de travail verbale endroit empan", "M√©moire de travail verbale endroit brut"),
                ("M√©moire de travail verbale envers empan", "M√©moire de travail verbale envers brut")
            ],
            "M√©moire de Travail Non Verbale": [
                ("M√©moire de travail non verbale endroit empan", "M√©moire de travail non verbale endroit brut"),
                ("M√©moire de travail non verbale envers empan", "M√©moire de travail non verbale envers brut")  
            ],   
            "Mise √† jour Verbale": [
                ("Mise √† jour verbale empan", "Mise √† jour verbale score"),
            ],
            "Mise √† jour Non Verbale": [
                ("Mise √† jour non verbale empan", "Mise √† jour non verbale score"),
            ],
            "INHIB verbale": [
                ("Inhibition verbale congruent score", "Inhibition verbale incongruent score"),
                ("Inhibition verbale congruent temps", "Inhibition verbale incongruent temps")
            ],
            "INHIB non verbale": [
                ("Inhibition non verbale congruent score", "Inhibition non verbale incongruent score"),
                ("Inhibition non verbale congruent temps", "Inhibition non verbale incongruent temps")
            ]
        }

        # Collecte des scores utilisateur et calculs d'interf√©rences
        user_scores = []
        inhibition_scores = {}
        missing_norms = []

        for category, task_pairs in categories.items():
            st.subheader(category)
            for task1, task2 in task_pairs:
                col1, col2 = st.columns(2)

                # Colonne 1 : Saisie pour task1
                with col1:
                    if task1 in age_data["T√¢che"].values:
                        score1 = st.text_input(f"{task1} :", value="")
                        if score1.strip():  # Si l'utilisateur a saisi une valeur
                            try:
                                score1 = float(score1)
                                user_scores.append({"T√¢che": task1, "Score Enfant": score1})
                                inhibition_scores[task1] = score1
                            except ValueError:
                                st.error(f"Valeur non valide pour {task1}. Veuillez entrer un nombre.")
                                inhibition_scores[task1] = score1
                    else:
                        st.warning(f"Pas de normes disponibles pour {task1}")
                        missing_norms.append(task1)

                # Colonne 2 : Saisie pour task2
                with col2:
                    if task2 in age_data["T√¢che"].values:
                        score2 = st.text_input(f"{task2} :", value="")
                        if score2.strip():  # Si l'utilisateur a saisi une valeur
                            try:
                                score2 = float(score2)
                                user_scores.append({"T√¢che": task2, "Score Enfant": score2})
                                inhibition_scores[task2] = score2
                            except ValueError:
                                st.error(f"Valeur non valide pour {task2}. Veuillez entrer un nombre.")
                                inhibition_scores[task2] = score2
                    else:
                        st.warning(f"Pas de normes disponibles pour {task2}")
                        missing_norms.append(task2)

        # Calculs des interf√©rences
                # Calculs des interf√©rences
        interferences = {
            "Inhibition verbale interf√©rence score": (
                inhibition_scores.get("Inhibition verbale incongruent score", 0) 
                - inhibition_scores.get("Inhibition verbale congruent score", 0)
            ),
            "Inhibition non verbale interf√©rence score": (
                inhibition_scores.get("Inhibition non verbale incongruent score", 0) 
                - inhibition_scores.get("Inhibition non verbale congruent score", 0)
            ),
            "Inhibition verbale interf√©rence temps": (
                inhibition_scores.get("Inhibition verbale incongruent temps", 0) 
                - inhibition_scores.get("Inhibition verbale congruent temps", 0)
            ),
            "Inhibition non verbale interf√©rence temps": (
                inhibition_scores.get("Inhibition non verbale incongruent temps", 0) 
                - inhibition_scores.get("Inhibition non verbale congruent temps", 0)
            )
        }

        # Afficher les r√©sultats des interf√©rences au fur et √† mesure
        st.subheader("Scores d'interf√©rence calcul√©s")
        for key, value in interferences.items():
            st.write(f"**{key}** : {value:.2f}")

       
        filtered_interferences = {
            key: value for key, value in interferences.items() if value != 0
        }

        # Ajouter uniquement les scores d'interf√©rences non nuls
        user_scores.extend(
            [{"T√¢che": key, "Score Enfant": value} for key, value in filtered_interferences.items()]
        )

        # Convertir les scores saisis en DataFrame
        scores_df = pd.DataFrame(user_scores, columns=["T√¢che", "Score Enfant"])

        # Fusionner avec les donn√©es originales pour les calculs
        merged_data = pd.merge(age_data, scores_df, on="T√¢che", how="left")
        merged_data["Z-Score"] = (merged_data["Score Enfant"] - merged_data["Moyenne"]) / merged_data["Ecart-type"]

        # Filtrer les t√¢ches avec des scores saisis
        filled_data = merged_data[~merged_data["Score Enfant"].isna()]

        # Supprimer les doublons
        filled_data = filled_data.drop_duplicates(subset="T√¢che")

        # Bouton pour confirmer les scores
        if st.button("Confirmer les scores et afficher les r√©sultats"):
            st.session_state["scores_entered"] = True
            st.session_state["age_data"] = filled_data
            st.session_state["missing_norms"] = missing_norms

# √âtape 3 : R√©sultats
    # D√©finir les cat√©gories et le mapping des noms abr√©g√©s
    categories_mapping = {
        "Langage": [
            "Discrimination Phonologique", "D√©cision Lexicale Auditive",
            "Mots Outils", "Stock Lexical", "Compr√©hension Syntaxique", "Mots Outils - BOEHM"
        ],
        "M√©moire de Travail": [
            "M√©moire de travail verbale endroit empan", "M√©moire de travail verbale endroit brut",
            "M√©moire de travail verbale envers empan", "M√©moire de travail verbale envers brut",
            "M√©moire de travail non verbale endroit empan", "M√©moire de travail non verbale endroit brut",
            "M√©moire de travail non verbale envers empan", "M√©moire de travail non verbale envers brut"
        ],
        "Mise √† jour": [
            "Mise √† jour verbale empan", "Mise √† jour verbale score",
            "Mise √† jour non verbale empan", "Mise √† jour non verbale score"
        ],
        "Inhibition": [
            "Inhibition verbale congruent score", "Inhibition verbale incongruent score",
            "Inhibition verbale congruent temps", "Inhibition verbale incongruent temps",
            "Inhibition verbale interf√©rence score", "Inhibition verbale interf√©rence temps",
            "Inhibition non verbale congruent score", "Inhibition non verbale incongruent score",
            "Inhibition non verbale congruent temps", "Inhibition non verbale incongruent temps",
            "Inhibition non verbale interf√©rence score", "Inhibition non verbale interf√©rence temps"
        ]
    }

    task_name_mapping = {
        "Discrimination Phonologique": "DP",
        "D√©cision Lexicale Auditive": "DL",
        "Mots Outils": "MO",
        "Stock Lexical": "SL",
        "Compr√©hension Syntaxique": "CS",
        "Mots Outils - BOEHM": "BOEHM",
        "M√©moire de travail verbale endroit empan": "MDT V\nendroit\nempan",
        "M√©moire de travail verbale endroit brut": "MDT V\nendroit\nbrut",
        "M√©moire de travail verbale envers empan": "MDT V\nenvers\nempan",
        "M√©moire de travail verbale envers brut": "MDT V\nenvers\nbrut",
        "M√©moire de travail non verbale endroit empan": "MDT NV\nendroit\nempan",
        "M√©moire de travail non verbale endroit brut": "MDT NV\nendroit\nbrut",
        "M√©moire de travail non verbale envers empan": "MDT NV\nenvers\nempan",
        "M√©moire de travail non verbale envers brut": "MDT NV\nenvers\nbrut",
        "Mise √† jour verbale empan": "MAJ V\nempan",
        "Mise √† jour verbale score": "MAJ V\nbrut",
        "Mise √† jour non verbale empan": "MAJ NV\nempan",
        "Mise √† jour non verbale score": "MAJ NV\nbrut",
        "Inhibition verbale congruent score": "INHIB VC \nscore",
        "Inhibition verbale incongruent score": "INHIB VI \nscore",
        "Inhibition verbale congruent temps": "INHIB VC \ntemps",
        "Inhibition verbale incongruent temps": "INHIB VI \ntemps",
        "Inhibition verbale interf√©rence score": "INHIB V \nscore",
        "Inhibition verbale interf√©rence temps": "INHIB V \ntemps",
        "Inhibition non verbale congruent score": "INHIB NVC \nscore",
        "Inhibition non verbale incongruent score": "INHIB NVI \nscore",
        "Inhibition non verbale congruent temps": "INHIB NVC \ntemps",
        "Inhibition non verbale incongruent temps": "INHIB NVI \ntemps",
        "Inhibition non verbale interf√©rence score": "INHIB NV \nscore",
        "Inhibition non verbale interf√©rence temps": "INHIB NV \ntemps"
    }

    # Ajouter la colonne "Cat√©gorie" pour chaque t√¢che
    def plot_grouped_scores(data, selected_tasks):
        # D√©finir les couleurs pour chaque cat√©gorie
        category_colors = {
            "Langage": "#3798da",
            "M√©moire de Travail": "#eca113",
            "Mise √† jour": "#4cb254",
            "Inhibition": "#8353da",
            "Autre": "gray"
        }

        # Filtrer les donn√©es pour inclure uniquement les t√¢ches s√©lectionn√©es
        data = data[data["T√¢che"].isin(selected_tasks)]

        # Liste des t√¢ches (abr√©g√©es) et leurs Z-scores
        tasks = data["T√¢che"].map(task_name_mapping).tolist()
        z_scores = data["Z-Score"].tolist()

        positions = np.arange(len(tasks))  # Une position unique par t√¢che

        # Ajouter une colonne pour les positions dans le DataFrame
        data["Position"] = positions

        # Cr√©er la figure
        fig_width = max(12, len(tasks) * 1.5)
        fig_height = 10
        fig, ax = plt.subplots(figsize=(fig_width, fig_height))

        # Tracer les points pour chaque t√¢che
        point_colors = data["Cat√©gorie"].map(category_colors)
        
        ax.scatter(positions, z_scores, color=point_colors, s=100, label="Z-Score", zorder=3)

        # Ajouter une zone gris√©e pour les scores "acceptables"
        ax.fill_between(positions, -2.5, 2.5, color="lightgray", alpha=0.5, zorder=1)

        # Ligne de r√©f√©rence Z=0
        ax.axhline(0, color="black", linestyle="--", linewidth=0.8, zorder=2)

        # Fixer les limites de l'axe Y
        ax.set_ylim(-10, 10)
        y_max = ax.get_ylim()[1]

        # Configurer les ticks et les labels
        ax.set_xticks(positions)
        ax.set_xticklabels(tasks, fontsize=12, fontweight="bold")

        last_pos = None  # Commencer avant la premi√®re position
        for idx, category in enumerate(category_colors.keys()):
            # Filtrer les donn√©es pour cette cat√©gorie
            category_data = data[data["Cat√©gorie"] == category]
            
            # Obtenir les positions des t√¢ches dans la cat√©gorie
            category_positions = category_data["Position"].tolist() if not category_data.empty else []
            
            # Relier les points avec une ligne si la cat√©gorie n'est pas vide
            if category_positions:
                ax.plot(
                    category_positions, category_data["Z-Score"].tolist(),
                    marker="o", linestyle="-", color=category_colors[category],
                    label=category, zorder=4, linewidth=4
                )
                
            # Ajouter le titre de la cat√©gorie au-dessus des points
            if category_positions:
                mid_pos = np.mean(category_positions)
                ax.text(
                    mid_pos, y_max + 0.5, category,
                    fontsize=18, fontweight="bold", ha="center", color=category_colors[category]
                )


     
        # Colorer les labels des ticks en fonction des cat√©gories
        for idx, task_label in enumerate(ax.get_xticklabels()):
            task_category = data.iloc[idx]["Cat√©gorie"]
            task_label.set_color(category_colors.get(task_category, "gray"))

        # Ajouter un titre
        ax.set_xticks(positions)
        ax.set_xticklabels(tasks, fontsize=16, fontweight='bold')
        ax.set_ylabel("Z-Score")
        x_center = positions.mean()
        ax.text(
            x_center, y_max + 2, "R√©sultats Batterie Comprendre",  
            fontsize=20, fontweight="bold", ha="center"
        )

        # Ajuster la mise en page
        plt.subplots_adjust(top=0.85, bottom=0.25)
        plt.tight_layout()

        # Afficher le graphique
        st.pyplot(fig)


# Ajouter la colonne "Cat√©gorie" pour chaque t√¢che
def assign_category(task):
    for category, tasks in categories_mapping.items():
        if task in tasks:
            print(f"Task '{task}' assigned to category '{category}'")  # D√©bogage
            return category
    return "Autre"


# √âtape 3 : R√©sultats
if st.session_state["scores_entered"]:
    st.header("√âtape 3 : R√©sultats")

    # R√©cup√©rer les donn√©es mises √† jour
    age_data = st.session_state["age_data"]
    missing_norms = st.session_state["missing_norms"]

    # Ajouter la colonne "Cat√©gorie" si elle n'existe pas
    if "Cat√©gorie" not in age_data.columns:
        categories_mapping = {
            "Langage": [
                "Discrimination Phonologique", "D√©cision Lexicale Auditive",
                "Mots Outils", "Stock Lexical", "Compr√©hension Syntaxique", "Mots Outils - BOEHM"
            ],
            "M√©moire de Travail": [
                "M√©moire de travail verbale endroit empan", "M√©moire de travail verbale endroit brut",
                "M√©moire de travail verbale envers empan", "M√©moire de travail verbale envers brut",
                "M√©moire de travail non verbale endroit empan", "M√©moire de travail non verbale endroit brut",
                "M√©moire de travail non verbale envers empan", "M√©moire de travail non verbale envers brut"
            ],
            "Mise √† jour": [
                "Mise √† jour verbale empan", "Mise √† jour verbale score",
                "Mise √† jour non verbale empan", "Mise √† jour non verbale score"
            ],
            "Inhibition": [
                "Inhibition verbale congruent score", "Inhibition verbale incongruent score",
                "Inhibition verbale congruent temps", "Inhibition verbale incongruent temps",
                "Inhibition verbale interf√©rence score", "Inhibition verbale interf√©rence temps",
                "Inhibition non verbale congruent score", "Inhibition non verbale incongruent score",
                "Inhibition non verbale congruent temps", "Inhibition non verbale incongruent temps",
                "Inhibition non verbale interf√©rence score", "Inhibition non verbale interf√©rence temps"
            ]
        }
        age_data["Cat√©gorie"] = age_data["T√¢che"].apply(assign_category)

    # Afficher le tableau des r√©sultats
    st.write("")
    st.dataframe(age_data.reset_index(drop=True))

    # S√©lection des t√¢ches calcul√©es
    # S√©lection des t√¢ches calcul√©es
    st.subheader("S√©lectionnez les t√¢ches √† afficher dans le graphique")
    calculated_tasks = age_data[~age_data["Z-Score"].isna()]["T√¢che"].tolist()
    tasks_by_category = {}
    for category, tasks in categories_mapping.items():
        tasks_in_category = [task for task in tasks if task in calculated_tasks]
        if tasks_in_category:
            tasks_by_category[category] = tasks_in_category

    # Ajouter des boutons pour s√©lectionner ou d√©s√©lectionner toutes les t√¢ches
    col1, col2, col3, col4, col5 = st.columns([1, 2, 1, 2, 1])
    with col2:
        if st.button("Tout s√©lectionner"):
            selected_tasks = calculated_tasks
        else:
            selected_tasks = []

    with col4:
        if st.button("Tout d√©s√©lectionner"):
            selected_tasks = []

    # Interface utilisateur pour s√©lectionner les t√¢ches par cat√©gories
    selected_tasks = st.multiselect(
        "T√¢ches calcul√©es disponibles :", 
        options=calculated_tasks, 
        default=selected_tasks,
        help="Vous pouvez rechercher ou s√©lectionner des t√¢ches dans la liste."
    )

# Fonction pour sauvegarder le graphique
    def save_graph_and_data(data, selected_tasks):
        # Cr√©ation des fichiers en m√©moire
        buffer = io.BytesIO()
        with zipfile.ZipFile(buffer, "w") as zf:
            # Sauvegarder le graphique
            fig_buffer = io.BytesIO()
            plot_grouped_scores(data, selected_tasks)
            plt.savefig(fig_buffer, format='png', dpi=300, bbox_inches="tight")
            fig_buffer.seek(0)
            zf.writestr(f"{st.session_state['child_id']}_Graphique_Comprendre.png", fig_buffer.read())

            # Sauvegarder le tableau des r√©sultats en Excel
            excel_buffer = io.BytesIO()
            data.to_excel(excel_buffer, index=False, engine="openpyxl")
            excel_buffer.seek(0)
            zf.writestr(f"{st.session_state['child_id']}_Tableau_Comprendre.xlsx", excel_buffer.read())

        buffer.seek(0)
        return buffer

    # Bouton pour t√©l√©charger le fichier ZIP
    if st.session_state["scores_entered"] and selected_tasks:
        st.subheader("T√©l√©chargez les r√©sultats")
        zip_file = save_graph_and_data(age_data, selected_tasks)
        st.download_button(
            label="üì• T√©l√©charger le tableau des r√©sultats et le graphique (ZIP)",
            data=zip_file,
            file_name=f"{st.session_state['child_id']}_Resultats_Comprendre.zip",
            mime="application/zip"
        )
